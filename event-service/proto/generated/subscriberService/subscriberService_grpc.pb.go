// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: subscriberService.proto

package subscriberService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriberServiceClient is the client API for SubscriberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberServiceClient interface {
	GetAllUserSubscribers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (SubscriberService_GetAllUserSubscribersClient, error)
}

type subscriberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberServiceClient(cc grpc.ClientConnInterface) SubscriberServiceClient {
	return &subscriberServiceClient{cc}
}

func (c *subscriberServiceClient) GetAllUserSubscribers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (SubscriberService_GetAllUserSubscribersClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriberService_ServiceDesc.Streams[0], "/subscriberService.SubscriberService/GetAllUserSubscribers", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriberServiceGetAllUserSubscribersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriberService_GetAllUserSubscribersClient interface {
	Recv() (*SubscriberResponse, error)
	grpc.ClientStream
}

type subscriberServiceGetAllUserSubscribersClient struct {
	grpc.ClientStream
}

func (x *subscriberServiceGetAllUserSubscribersClient) Recv() (*SubscriberResponse, error) {
	m := new(SubscriberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriberServiceServer is the server API for SubscriberService service.
// All implementations must embed UnimplementedSubscriberServiceServer
// for forward compatibility
type SubscriberServiceServer interface {
	GetAllUserSubscribers(*UserRequest, SubscriberService_GetAllUserSubscribersServer) error
	mustEmbedUnimplementedSubscriberServiceServer()
}

// UnimplementedSubscriberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriberServiceServer struct {
}

func (UnimplementedSubscriberServiceServer) GetAllUserSubscribers(*UserRequest, SubscriberService_GetAllUserSubscribersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUserSubscribers not implemented")
}
func (UnimplementedSubscriberServiceServer) mustEmbedUnimplementedSubscriberServiceServer() {}

// UnsafeSubscriberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberServiceServer will
// result in compilation errors.
type UnsafeSubscriberServiceServer interface {
	mustEmbedUnimplementedSubscriberServiceServer()
}

func RegisterSubscriberServiceServer(s grpc.ServiceRegistrar, srv SubscriberServiceServer) {
	s.RegisterService(&SubscriberService_ServiceDesc, srv)
}

func _SubscriberService_GetAllUserSubscribers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriberServiceServer).GetAllUserSubscribers(m, &subscriberServiceGetAllUserSubscribersServer{stream})
}

type SubscriberService_GetAllUserSubscribersServer interface {
	Send(*SubscriberResponse) error
	grpc.ServerStream
}

type subscriberServiceGetAllUserSubscribersServer struct {
	grpc.ServerStream
}

func (x *subscriberServiceGetAllUserSubscribersServer) Send(m *SubscriberResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SubscriberService_ServiceDesc is the grpc.ServiceDesc for SubscriberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscriberService.SubscriberService",
	HandlerType: (*SubscriberServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUserSubscribers",
			Handler:       _SubscriberService_GetAllUserSubscribers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "subscriberService.proto",
}
